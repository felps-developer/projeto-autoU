"""
Vers√£o simplificada para teste de deploy
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
import os

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="AutoU Email Classifier",
    description="API para classifica√ß√£o de emails e gera√ß√£o de respostas autom√°ticas",
    version="1.0.0"
)

# CORS para permitir requisi√ß√µes do frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """P√°gina inicial"""
    return {"message": "AutoU Email Classifier API est√° funcionando! üöÄ"}

@app.get("/health")
async def health_check():
    """Health check da API"""
    return {
        "status": "healthy",
        "message": "API funcionando corretamente",
        "version": "1.0.0"
    }

@app.get("/docs")
async def docs():
    """Redirecionar para documenta√ß√£o"""
    return {"message": "Acesse /docs para ver a documenta√ß√£o da API"}

# Servir frontend se existir
@app.get("/frontend")
async def serve_frontend():
    """Serve o frontend da aplica√ß√£o"""
    frontend_file = os.path.join("frontend", "index.html")
    if os.path.exists(frontend_file):
        return FileResponse(frontend_file)
    return {"message": "Frontend n√£o encontrado"}

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
